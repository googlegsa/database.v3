// Copyright 2011 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package com.google.enterprise.connector.db.diffing;

import com.google.enterprise.connector.spi.SpiConstants;
import com.google.enterprise.connector.db.diffing.UrlDocumentBuilder.UrlType;

import java.util.HashMap;
import java.util.Map;
import java.util.logging.Logger;

public class UrlDocumentBuilderTest extends DocumentBuilderFixture {
  /**
   * Test case for generateURLMetaFeed().
   */
  public final void testUrlDocument() throws Exception {
    Map<String, Object> rowMap = new HashMap<String, Object>();

    String documentURL = "http://myhost/app/welcome.html";
    String versionColumn = "version";
    String versionValue = "2.3.4";

    rowMap.put(primaryKeyColumn, 1);
    rowMap.put(dbContext.getDocumentURLField(), documentURL);
    rowMap.put(versionColumn, versionValue);

    JsonDocument doc = getJsonDocument(
        new UrlDocumentBuilder(dbContext, UrlType.COMPLETE_URL), rowMap);
    assertEquals(versionValue, getProperty(doc, versionColumn));
    assertEquals(documentURL,
        getProperty(doc, SpiConstants.PROPNAME_SEARCHURL));
  }

  public final void testDocIdDocument() throws Exception {
    Map<String, Object> rowMapWithBaseURL = new HashMap<String, Object>();

    String baseURL = "http://myhost/app/";
    String docId = "index123.html";
    String versionColumn = "version";
    String versionValue = "2.3.4";

    // Test scenario: when base URL is not empty, the search URL is
    // generated by concatenating document id with base URL.
    rowMapWithBaseURL.put(primaryKeyColumn, 2);
    rowMapWithBaseURL.put(dbContext.getDocumentIdField(), docId);
    rowMapWithBaseURL.put(versionColumn, versionValue);

    JsonDocument docWithBaseURL = getJsonDocument(
        new UrlDocumentBuilder(dbContext, UrlType.BASE_URL), rowMapWithBaseURL);
    assertEquals(versionValue, getProperty(docWithBaseURL, versionColumn));
    assertEquals(baseURL + docId, getProperty(docWithBaseURL, 
        SpiConstants.PROPNAME_SEARCHURL));
  }
}
