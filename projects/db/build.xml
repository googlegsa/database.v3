<?xml version="1.0" encoding="UTF-8"?>
<project name="db-connector" default="build" basedir=".">

  <!--
    ========================= PROPERTIES =============================
  -->
  <property file="${user.home}/google-enterprise-connector-db.properties" />
  <property file="google-enterprise-connector-db.properties" />
  <property file="version.properties" />

  <property name="COMPILE_DEBUG_FLAG" value="true" />
  <property name="COMPILE_DEBUG_LEVEL" value="source,lines,vars" />
  <property name="COMPILE_TARGET" value="1.5" />
  <property name="COMPILE_BOOTCLASSPATH" value="${build.bootclasspath}" />

  <property name="build.dir" value="build" />
  <property name="build-prod.dir" value="${build.dir}/prod" />
  <property name="build-prod-config.dir" value="${build-prod.dir}/config" />
  <property name="build-tests.dir" value="${build.dir}/tests" />
  <property name="zip.dir" value="${build.dir}/file" />
  <property name="config-zip.dir" value="${zip.dir}/Config" />
  <property name="lib-zip.dir" value="${zip.dir}/Lib" />
  <property name="license-zip.dir" value="${zip.dir}/License" />
  <property name="db-connector-jar-zip.file" value="${zip.dir}/connector-db.jar" />
  <property name="db-connector-copying-zip.file" value="${zip.dir}/COPYING" />
  <property name="classes-prod.dir" value="${build-prod.dir}/classes" />
  <property name="classes-tests.dir" value="${build-tests.dir}/classes" />
  <property name="jar-prod.dir" value="${build-prod.dir}/jar" />
  <property name="jar-prod.file" value="${jar-prod.dir}/connector-db.jar" />
  <property name="downloads.dir" value="downloads" />
  <property name="javadoc.dir" value="javadoc" />
  <property name="javadoc-prod.dir" value="${javadoc.dir}/prod" />
  <property name="src-prod.dir" value="source/java" />
  <property name="src-tests.dir" value="source/javatests" />
  <property name="license-prod.dir" value="License" />
  <property name="config.dir" value="config" />
  <property name="logging-properties.file" value="${config.dir}/logging.properties" />
  <property name="thirdparty-prod-jar.dir" location="third_party/prod" />
  <property name="copying.file" value="COPYING" />
  <property name="readme.file" value="README" />
  <property name="release_notes.file" value="RELEASE_NOTES" />
  <property name="downloads.dir" value="downloads" />
  <property name="tests_out.dir" value="tests_outdir" />
  <property name="tests.logging.properties" location="${classes-tests.dir}/tests.logging.properties" />
  <property name="connector-manager-projects.dir" location="${build.connector.manager.home}/projects" />
  <property name="connector-manager.dir" location="${connector-manager-projects.dir}/connector-manager" />
  <property name="connector-manager-thirdparty-jar.dir" 
            location="${connector-manager.dir}/third-party" />
  <property name="connector-thirdparty-jar.dir" location="./third_party" />
  <property name="connector-thirdparty-tests-jar.dir" location="${connector-thirdparty-jar.dir}/tests" />
  <property name="spi.jar.dir" value="${connector-manager.dir}/dist/jarfile" />
  <property file="${config.dir}/build_code_coverage.properties" />
  <path id="cobertura.classpath">
    <fileset dir="${connector-manager-thirdparty-jar.dir}/cobertura">
      <include name="**/*.jar" />
    </fileset>
  </path>

  <!--
    =========================== TASKS ===============================
  -->
  <include file="${connector-manager-projects.dir}/svnbuild.xml" as="svn"/>

  <target name="build" depends="init,compile_prod,run_tests,jar_prod">
  </target>

  <target name="init">
    <mkdir dir="${build.dir}" />
    <mkdir dir="${build-tests.dir}" />
    <mkdir dir="${build-prod.dir}" />
    <mkdir dir="${build-prod-config.dir}" />
    <mkdir dir="${zip.dir}" />
    <mkdir dir="${config-zip.dir}" />
    <mkdir dir="${lib-zip.dir}" />
    <mkdir dir="${license-zip.dir}" />
    <mkdir dir="${classes-prod.dir}" />
    <mkdir dir="${classes-tests.dir}" />
    <mkdir dir="${jar-prod.dir}" />
    <mkdir dir="${downloads.dir}" />
    <mkdir dir="${javadoc.dir}" />
    <mkdir dir="${javadoc-prod.dir}" />
    <mkdir dir="${tests_out.dir}" />
  </target>

  <target name="compile_prod" depends="init">
    <!-- compile java source files -->
    <javac srcdir="${src-prod.dir}" destdir="${classes-prod.dir}"
           includeantruntime="false"
           debug="${COMPILE_DEBUG_FLAG}" debuglevel="${COMPILE_DEBUG_LEVEL}"
           target="${COMPILE_TARGET}" source="${COMPILE_TARGET}">
      <compilerarg line="-Xlint -Xlint:-serial"/>
      <bootclasspath path="${COMPILE_BOOTCLASSPATH}"/>
      <classpath>
        <fileset dir="${spi.jar.dir}" includes="**/connector-spi.jar" />
        <fileset dir="${connector-manager-thirdparty-jar.dir}">
          <include name="prod/*.jar" />
        </fileset>
        <fileset dir="${thirdparty-prod-jar.dir}" includes="**/*.jar" />
      </classpath>
    </javac>
  </target>

  <target name="compile_tests" depends="init,jar_prod">
    <!-- compile java source files for tests -->
    <javac srcdir="${src-tests.dir}" destdir="${classes-tests.dir}"
           includeantruntime="false"
           debug="${COMPILE_DEBUG_FLAG}" debuglevel="${COMPILE_DEBUG_LEVEL}"
           target="${COMPILE_TARGET}" source="${COMPILE_TARGET}">
      <!-- CM JAR Class-Path references are not available. -->
      <compilerarg line="-Xlint -Xlint:-serial -Xlint:-path"/>
      <bootclasspath path="${COMPILE_BOOTCLASSPATH}"/>
      <classpath>
        <fileset dir="${spi.jar.dir}" includes="**/*.jar" />
        <fileset dir="${connector-manager-thirdparty-jar.dir}">
          <include name="prod/*.jar" />
          <include name="tests/junit.jar" />
        </fileset>
        <fileset dir="${thirdparty-prod-jar.dir}" includes="**/*.jar" />
        <pathelement location="${jar-prod.file}" />
      </classpath>
    </javac>
  </target>

  <target name="run_tests" depends="compile_tests,jar_prod,instrument">
    <property name="test.suite" value="*" />
    <mkdir
      dir="${classes-tests.dir}/com/google/enterprise/connector/db/config" />
    <copy todir="${classes-tests.dir}/com/google/enterprise/connector/db/config">
      <fileset dir="${config.dir}" />
      <fileset dir="${connector-thirdparty-tests-jar.dir}"
        includes="**/*.sql" />
      <fileset dir="${connector-thirdparty-tests-jar.dir}"
        includes="**/*.properties" />
    </copy>
    <junit printsummary="yes" haltonfailure="no"
           failureproperty="${ant.project.name}.failure">
      <assertions>
        <enable />
      </assertions>
      <!--
        The instrumented classes reference classes used by the Cobertura
        runtime, so Cobertura and its dependencies must be on your
        classpath.
      -->
      <classpath location="${instrumented.dir}" />
      <classpath refid="cobertura.classpath" />
      <classpath>
        <pathelement location="${classes-tests.dir}" />
        <fileset dir="${spi.jar.dir}" includes="**/*.jar" />
        <fileset dir="${thirdparty-prod-jar.dir}" includes="**/*.jar" />
        <pathelement location="${jar-prod.file}" />
        <fileset dir="${connector-manager-thirdparty-jar.dir}">
          <include name="prod/*.jar" />
          <include name="tests/junit.jar" />
        </fileset>
      </classpath>
      <formatter type="xml" />
      <batchtest fork="yes" todir="${reports.xml.dir}">
        <fileset dir="${test.dir}" includes="**/${test.suite}Test.java" />
      </batchtest>
    </junit>
    <junitreport todir="${reports.xml.dir}">
      <fileset dir="${reports.xml.dir}">
        <include name="TEST-*.xml" />
      </fileset>
      <report format="frames" todir="${reports.html.dir}" />
    </junitreport>
    <fail if="${ant.project.name}.failure" message="Test failure"/>
  </target>

  <target name="jar_prod" depends="compile_prod,svn.svn-branch-version"
          description="db-connector-jar">
    <copy todir="${build-prod-config.dir}">
      <fileset dir="${config.dir}" />
    </copy>

    <tstamp />
    <jar jarfile="${jar-prod.file}">
      <fileset dir="source/java" includes="**/*.properties" />
      <fileset dir="${classes-prod.dir}" />
      <fileset dir="${build-prod.dir}" includes="config/**" />
      <fileset dir="${build-prod.dir}" includes="*.properties" />
      <manifest>
        <attribute name="Implementation-Title" value="Database Connector" />
        <attribute name="Implementation-Version"
                   value="${version} (build ${svn.branch.version} ${TODAY})"/>
        <attribute name="Implementation-Vendor" value="Google Inc." />
        <attribute name="Specification-Title" value="Connector Manager SPI" />
        <attribute name="Specification-Version" value="${version.spi}" />
        <attribute name="Specification-Vendor" value="Google Inc." />
        <attribute name="Main-Class"
                   value="com.google.enterprise.connector.db.DBMain" />
      </manifest>
    </jar>
  </target>

  <target name="javadoc_prod" depends="compile_prod"
    description="Create component Javadoc documentation">
    <javadoc sourcepath="${src-prod.dir}" destdir="${javadoc.dir}"
      packagenames="com.google.enterprise.connector.db" author="false"
      private="true" version="true" doctitle="&lt;h2&gt;${product}&lt;/h2&gt;"
      windowtitle="${product} (Version ${version})" bottom="Copyright 2009 Google Inc.">
      <classpath>
        <fileset dir="${spi.jar.dir}" includes="**/*.jar" />
        <fileset dir="${thirdparty-prod-jar.dir}" includes="**/*.jar" />
      </classpath>
    </javadoc>
  </target>

  <target name="download_db_connector" depends="jar_prod">
    <property name="connector-db-src.zip"
      value="${downloads.dir}/connector-db-${svn.branch}-src.zip" />
    <zip destfile="${connector-db-src.zip}">
      <zipfileset dir="."
        prefix="connector-db-${version}/projects/database-connector"
        includes="${readme.file}, ${copying.file}, ${release_notes.file}, Build_ReadMe.txt, build.xml,version.properties ,config/**/*, third_party/**/*, License/**/*, source/**/*" />
    </zip>
    <checksum algorithm="SHA-1" file="${connector-db-src.zip}" />

    <copy file="${jar-prod.file}" tofile="${db-connector-jar-zip.file}" />
    <copy file="${copying.file}" tofile="${db-connector-copying-zip.file}" />
    <copy file="${logging-properties.file}" todir="${config-zip.dir}" />
    <copy todir="${lib-zip.dir}">
      <fileset dir="${thirdparty-prod-jar.dir}" excludes="**/guava-r05.jar"
        includes="**/*.jar" />
    </copy>
    <copy todir="${license-zip.dir}">
      <fileset dir="${license-prod.dir}" />
    </copy>
    <zip destfile="${downloads.dir}/connector-db-${svn.branch}.zip">
      <zipfileset dir="${zip.dir}" />
      <zipfileset dir="." includes="RELEASE_NOTES" />
    </zip>
    <checksum algorithm="SHA-1"
              file="${downloads.dir}/connector-db-${svn.branch}.zip" />
  </target>

  <target name="clean" description="Deletes all build files.">
    <delete dir="${build.dir}" />
    <delete dir="${downloads.dir}" />
    <delete dir="${javadoc.dir}" />
    <delete dir="${tests_out.dir}" />
  </target>

  <!-- Cobertura Tasks -->

  <taskdef classpathref="cobertura.classpath" resource="tasks.properties" />

  <target name="init_code_coverage">
    <mkdir dir="${classes.dir}" />
    <mkdir dir="${instrumented.dir}" />
    <mkdir dir="${reports.xml.dir}" />
    <mkdir dir="${reports.html.dir}" />
    <mkdir dir="${coverage.xml.dir}" />
    <mkdir dir="${coverage.summaryxml.dir}" />
    <mkdir dir="${coverage.html.dir}" />
  </target>

  <target name="compile_code_coverage" 
          depends="init_code_coverage,compile_prod,compile_tests"/>

  <target name="instrument" depends="compile_code_coverage">
    <cobertura-instrument todir="${instrumented.dir}">
      <!--
        The following line causes instrument to ignore any source line
        containing a reference to log4j, for the purposes of coverage
        reporting.
      -->
      <ignore regex="org.apache.log4j.*" />
      <fileset dir="${classes.dir}">
        <!--
          Instrument all the application classes, but don't instrument the
          test classes.
        -->
        <include name="**/*.class" />
        <exclude name="**/*Test.class" />
      </fileset>
    </cobertura-instrument>
  </target>

  <target name="coverage-report">
    <!--
      Generate an XML file containing the coverage data using the "srcdir"
      attribute.
    -->
    <cobertura-report srcdir="${src.dir}" destdir="${coverage.xml.dir}"
      format="xml" />
  </target>

  <target name="alternate-coverage-report">
    <!--
      Generate a series of HTML files containing the coverage data in a
      user-readable form using nested source filesets.
    -->
    <cobertura-report destdir="${coverage.html.dir}">
      <fileset dir="${src.dir}">
        <include name="**/*.java" />
      </fileset>
    </cobertura-report>
  </target>

  <target name="clean_code_coverage"
    description="Remove all files created by the build/test process.">
    <delete dir="${classes.dir}" />
    <delete dir="${instrumented.dir}" />
    <delete dir="${reports.dir}" />
    <delete file="cobertura.log" />
    <delete file="cobertura.ser" />
  </target>

  <target name="run_code_coverage"
    depends="run_tests,coverage-report,alternate-coverage-report"
    description="Compile, instrument ourself, run the tests and generate JUnit and coverage reports." />

</project>
